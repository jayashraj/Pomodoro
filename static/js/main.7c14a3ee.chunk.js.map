{"version":3,"sources":["logo.svg","Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Modal","className","this","props","on","onClick","close","aria-hidden","sub","pomodoroTimer","add","breakTimer","React","Component","App","state","break","timer","modal","buttonAdd","bind","buttonSubtract","buttonReset","buttonStart","toggleModal","pomodoroComplete","a","timerName","which","split","parseInt","join","tempObj","setState","console","log","timeinterval","setInterval","total","min","Math","floor","sec","document","title","clearInterval","audio","Audio","play","playButton","id","pauseButton","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c14a3ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nclass Modal extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={this.props.on ? \"modal__on\" : \"modal__off\"}>\r\n        <button\r\n          className=\"modal__on__button modal__on__close-button\"\r\n          onClick={this.props.close}\r\n        >\r\n          <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n        </button>\r\n        <div>\r\n          <h2>Pomodoro</h2>\r\n          <div className=\"row\">\r\n            <button\r\n              className=\"modal__on__button\"\r\n              onClick={() => this.props.sub(\"pomodoro\")} //you cant directly invoke onClick={this.prop.sumfunc(value)}, arrow function allows this\r\n            >\r\n              -\r\n            </button>\r\n            <div className=\"modal__on__timer\">{this.props.pomodoroTimer}</div>\r\n            <button\r\n              className=\"modal__on__button\"\r\n              onClick={() => this.props.add(\"pomodoro\")}\r\n            >\r\n              +\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h2>Break</h2>\r\n          <div className=\"row\">\r\n            <button\r\n              className=\"modal__on__button\"\r\n              onClick={() => this.props.sub(\"break\")}\r\n            >\r\n              -\r\n            </button>\r\n            <div className=\"modal__on__timer\">{this.props.breakTimer}</div>\r\n            <button\r\n              className=\"modal__on__button\"\r\n              onClick={() => this.props.add(\"break\")}\r\n            >\r\n              +\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {/*We just need to cutomize the buttons, this modal thing, hide modal with the modal_off cass */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Modal;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./css/style.css\";\nimport Modal from \"./Modal.js\";\n\n/*\nTODOs:\n\n- Maybe hide the  plus and minus buttons when the pomodoro begins\n\n- initial start page to configure the pomodoro+break then it hides in the corner, maybe hidden when pomodoro is active\n\n*/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      on: false,\n      break: false,\n      breakTimer: \"5:00\",\n      pomodoroTimer: \"25:00\",\n      timer: \"25:00\",\n      modal: true,\n    };\n    this.buttonAdd = this.buttonAdd.bind(this);\n    this.buttonSubtract = this.buttonSubtract.bind(this);\n    this.buttonReset = this.buttonReset.bind(this);\n    this.buttonStart = this.buttonStart.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.pomodoroComplete = this.pomodoroComplete.bind(this);\n  }\n  buttonAdd(which = \"notmodal\") {\n    let a, timerName;\n    /* If the minute count is less than 60, add 5, i.e. 5,10,...55,60 */\n    if (which === \"pomodoro\") {\n      a = this.state.pomodoroTimer;\n      timerName = \"pomodoroTimer\";\n    } else if (which === \"break\") {\n      a = this.state.breakTimer;\n      timerName = \"breakTimer\";\n    } else {\n      a = this.state.timer;\n    }\n    a = a.split(\":\");\n    if (a[0] < 60) {\n      a[0] = parseInt(a[0]) + 5;\n    }\n    a = a.join(\":\");\n    let tempObj = {};\n    tempObj[timerName] = a;\n    this.setState(tempObj);\n    if (which === \"pomodoro\" && !this.state.break) {\n      this.setState({ timer: a });\n    } else if (which === \"break\" && this.state.break) {\n      this.setState({ timer: a });\n    } else if (which === \"notmodal\") {\n      this.setState({ timer: a });\n    }\n\n    console.log(this.state);\n  }\n  buttonSubtract(which) {\n    /* If the minute count is less than 5, subtract one, else subtract 5*/\n    console.log(which);\n    let a, timerName;\n    if (which === \"pomodoro\") {\n      a = this.state.pomodoroTimer;\n      timerName = \"pomodoroTimer\";\n    } else if (which === \"break\") {\n      a = this.state.breakTimer;\n      timerName = \"breakTimer\";\n    } else {\n      a = this.state.timer;\n    }\n    a = a.split(\":\");\n    if (a[0] > 5) {\n      a[0] = parseInt(a[0]) - 5;\n    } else if (parseInt(a[0]) <= 5 && a[0] >= 1) {\n      a[0] = parseInt(a[0]) - 1;\n    }\n    a = a.join(\":\");\n    let tempObj = {};\n    tempObj[timerName] = a;\n    this.setState(tempObj);\n    if (which === \"pomodoro\" && !this.state.break) {\n      this.setState({ timer: a });\n    } else if (which === \"break\" && this.state.break) {\n      this.setState({ timer: a });\n    } else if (which === \"notmodal\") {\n      this.setState({ timer: a });\n    }\n  }\n  buttonReset() {\n    /*If user resets while in break and the timer has not decreased, it will reset to Pomodoro   */\n    if (this.state.break && this.state.timer === this.state.breakTimer) {\n      this.setState({\n        timer: this.state.pomodoroTimer,\n        on: false,\n        break: false,\n      });\n    } else if (this.state.break) {\n      /* If state is break, then change the timer back to the full break time */\n      this.setState({\n        timer: this.state.breakTimer,\n      });\n    } else {\n      /* If state is in pomodoro, then change the timer back to the full pomodoro time */\n      this.setState({\n        timer: this.state.pomodoroTimer,\n      });\n    }\n  }\n  buttonStart() {\n    console.log(this.state.on);\n\n    var timeinterval = setInterval(() => {\n      if (this.state.on) {\n        /* If the timer is counting */\n        let a = this.state.timer.split(\":\");\n        let total = parseInt(a[0]) * 60 + parseInt(a[1]);\n        if (total <= 0) {\n          //If the timer is counting, When timer reaches zero, switch the mode\n          if (this.state.break) {\n            // If the timer is counting, When timer reaches zero, Start pomodoro if in break\n            this.setState({\n              timer: this.state.pomodoroTimer,\n            });\n          } else {\n            // If the timer is counting, When timer reaches zero, Start break if in pomodoro\n            this.pomodoroComplete();\n            console.log(\"dis the doundplay?\");\n            this.setState({\n              timer: this.state.breakTimer,\n            });\n          }\n          //Eitherway change the state of break, that is if in pomodoro and clock reaches 0, start break\n          this.setState({\n            break: !this.state.break,\n          });\n        } else {\n          //If the timer is counting, If clock is not close to 0, subtract 1\n          total -= 1;\n          let min = Math.floor(total / 60);\n          let sec = total - min * 60;\n          if (min < 10) {\n            min = \"0\" + min;\n          }\n          if (sec < 10) {\n            sec = \"0\" + sec;\n          }\n          this.setState({\n            timer: min + \":\" + sec,\n          });\n          document.title = min + \":\" + sec;\n        }\n      } else {\n        //If the clock is stopped, clear the counter, the time of the counter is stored in variable timer\n        clearInterval(timeinterval);\n      }\n    }, 1000);\n\n    /* Basically starts and pauses the timer, main function of the button*/\n    this.setState({\n      on: !this.state.on,\n    });\n  }\n  pomodoroComplete() {\n    // Can be for break, might add logging features to show how many lapses completed later\n    var audio = new Audio(\"done.\");\n    console.log(\"playing audio\");\n    audio.play();\n  }\n  toggleModal() {\n    this.setState({\n      modal: !this.state.modal,\n    });\n  }\n  render() {\n    const playButton = (\n      <button\n        className={\n          this.state.break\n            ? \"break__button button__square\"\n            : \"pomodoro__button button__square\"\n        }\n        id=\"button__start\"\n        onClick={this.buttonStart}\n      >\n        <i className=\"fas fa-play\"></i>\n      </button>\n    );\n    const pauseButton = (\n      <button\n        className={\n          this.state.break\n            ? \"break__button button__square\"\n            : \"pomodoro__button button__square\"\n        }\n        id=\"button__start\"\n        onClick={this.buttonStart}\n      >\n        <i className=\"fas fa-pause\"></i>\n      </button>\n    );\n    return (\n      <div className=\"container\">\n        <Modal\n          on={this.state.modal}\n          add={this.buttonAdd}\n          sub={this.buttonSubtract}\n          close={this.toggleModal}\n          breakTimer={this.state.breakTimer}\n          pomodoroTimer={this.state.pomodoroTimer}\n        />\n        <div className={this.state.break ? \"break\" : \"pomodoro\"}>\n          <button\n            className={\n              this.state.break\n                ? \"break__button modal__on__close-button button__round\"\n                : \"pomodoro__button modal__on__close-button button__round\"\n            }\n            onClick={this.toggleModal}\n          >\n            <i className=\"fas fa-cogs\"></i>\n          </button>\n          <div\n            className={this.state.break ? \"break__title\" : \"pomodoro__title\"}\n          >\n            {this.state.break ? \"break\" : \"pomodoro\"}\n          </div>\n          <div\n            className={this.state.break ? \"break__timer\" : \"pomodoro__timer\"}\n          >\n            {this.state.timer}\n          </div>\n          <div className=\"pomodoro__controls\">\n            {/*<div className=\"row\">\n              <button\n                className={\n                  this.state.break\n                    ? \"break__button button__round\"\n                    : \"pomodoro__button button__round\"\n                }\n                id=\"button__add\"\n                onClick={() =>\n                  this.buttonAdd(this.state.break ? \"break\" : \"pomodoro\")\n                }\n              >\n                <i className=\"fas fa-plus\"></i>\n              </button>\n              <button\n                className={\n                  this.state.break\n                    ? \"break__button button__round\"\n                    : \"pomodoro__button button__round\"\n                }\n                id=\"button__subtract\"\n                onClick={() =>\n                  this.buttonSubtract(this.state.break ? \"break\" : \"pomodoro\")\n                }\n              >\n                <i className=\"fas fa-minus\"></i>\n              </button>\n            </div>*/}\n            <div className=\"row\">\n              {this.state.on ? pauseButton : playButton}\n              <button\n                className={\n                  this.state.break\n                    ? \"break__button button__square\"\n                    : \"pomodoro__button button__square\"\n                }\n                id=\"button__reset\"\n                onClick={this.buttonReset}\n              >\n                <i className=\"fas fa-undo\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n    // change code above this line\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './fontawesome/css/all.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}