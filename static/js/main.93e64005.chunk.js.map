{"version":3,"sources":["logo.svg","Config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Config","sessionLength","breakLength","change","toggle","className","onClick","id","App","props","state","on","screen","session","break","timer","config","changeLength","bind","resetTimers","startStopTimer","toggleConfig","minute","clockMode","this","setState","e","target","split","mode","changeCounter","console","log","document","getElementById","pause","currentTime","title","timeinterval","setInterval","a","total","parseInt","play","min","Math","floor","sec","clearInterval","src","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93e64005.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\n//<div onClick={onClick}></div>\r\n\r\nconst Config = ({ sessionLength, breakLength, change, toggle }) => {\r\n  return (\r\n    <div className=\"config\">\r\n      <button className=\"button button-controls button-toggle\" onClick={toggle}>\r\n        <i className=\"fas fa-cogs\"></i>\r\n      </button>\r\n      <div className=\"row-group\">\r\n        <div className=\"label\" id=\"break-label\">\r\n          Break Length\r\n        </div>\r\n        <div className=\"row-buttons\">\r\n          <button\r\n            id=\"break-decrement\"\r\n            className=\"button button-controls\"\r\n            onClick={change}\r\n          >\r\n            -\r\n          </button>\r\n          <div id=\"break-length\" className=\"lengthValue\">\r\n            {breakLength}\r\n          </div>\r\n          <button\r\n            id=\"break-increment\"\r\n            className=\"button button-controls\"\r\n            onClick={change}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row-group\">\r\n        <div className=\"label\" id=\"session-label\">\r\n          Session Length\r\n        </div>\r\n        <div className=\"row-buttons\">\r\n          <button\r\n            id=\"session-decrement\"\r\n            className=\"button button-controls\"\r\n            onClick={change}\r\n          >\r\n            -\r\n          </button>\r\n          <div id=\"session-length\" className=\"lengthValue\">\r\n            {sessionLength}\r\n          </div>\r\n          <button\r\n            id=\"session-increment\"\r\n            className=\"button button-controls\"\r\n            onClick={change}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Config;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Config from \"./Config.js\";\nimport \"./css/style.css\";\nimport \"./fontawesome/css/all.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      on: false,\n      screen: \"session\",\n      session: 25,\n      break: 5,\n      timer: \"25:00\",\n      config: true,\n    };\n    this.changeLength = this.changeLength.bind(this);\n    this.resetTimers = this.resetTimers.bind(this);\n    this.startStopTimer = this.startStopTimer.bind(this);\n    this.toggleConfig = this.toggleConfig.bind(this);\n  }\n  changeCounter(minute) {\n    let clockMode = minute > 9 ? minute + \":00\" : \"0\" + minute + \":00\";\n    this.setState({ timer: clockMode });\n  }\n  toggleConfig() {\n    this.setState({ config: !this.state.config });\n  }\n  changeLength(e) {\n    //mode can be \"session\" or \"break\"\n    let [mode, change] = e.target.id.split(\"-\");\n\n    if (change === \"increment\" && this.state[mode] < 60) {\n      this.setState({\n        [mode]: this.state[mode] + 1,\n      });\n      if (this.state.screen === mode) {\n        this.changeCounter(this.state[mode] + 1);\n      }\n      console.log(this.state);\n    } else if (change === \"decrement\" && this.state[mode] > 1) {\n      this.setState({\n        [mode]: this.state[mode] - 1,\n      });\n      if (this.state.screen === mode) {\n        this.changeCounter(this.state[mode] - 1);\n      }\n      console.log(this.state);\n    }\n  }\n  resetTimers() {\n    console.log(this.state);\n    this.setState({\n      session: 25,\n      break: 5,\n      timer: \"25:00\",\n      screen: \"session\",\n      on: false,\n    });\n    document.getElementById(\"beep\").pause();\n    document.getElementById(\"beep\").currentTime = 0;\n    document.title = \"25:00\";\n  }\n  startStopTimer() {\n    var timeinterval = setInterval(() => {\n      if (this.state.on) {\n        //If timer is counting\n        let a = this.state.timer.split(\":\");\n        let total = parseInt(a[0]) * 60 + parseInt(a[1]);\n        if (total <= 0) {\n          document.getElementById(\"beep\").play();\n          //If the timer is counting, When timer reaches zero, switch the mode\n          if (this.state.screen === \"break\") {\n            // If the timer is counting, When timer reaches zero, Start pomodoro if in break\n            this.setState({\n              screen: \"session\",\n            });\n            this.changeCounter(this.state.session);\n          } else if (this.state.screen === \"session\") {\n            // If the timer is counting, When timer reaches zero, Start break if in pomodoro\n            this.setState({\n              screen: \"break\",\n            });\n            this.changeCounter(this.state.break);\n          }\n        } else {\n          //If the timer is counting, If clock is not close to 0, subtract 1\n          total -= 1;\n          let min = Math.floor(total / 60);\n          let sec = total - min * 60;\n          if (min < 10) {\n            min = \"0\" + min;\n          }\n          if (sec < 10) {\n            sec = \"0\" + sec;\n          }\n          this.setState({\n            timer: min + \":\" + sec,\n          });\n          document.title = min + \":\" + sec;\n        }\n      } else {\n        //If the clock is stopped, clear the counter, the time of the counter is stored in variable timer\n        clearInterval(timeinterval);\n      }\n    }, 1000);\n\n    /* Basically starts and pauses the timer, main function of the button*/\n    this.setState({\n      on: !this.state.on,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <audio id=\"beep\">\n          <source src=\"done.mp3\" type=\"audio/mpeg\" />\n        </audio>\n        {this.state.config && (\n          <Config\n            sessionLength={this.state.session}\n            breakLength={this.state.break}\n            change={this.changeLength}\n            toggle={this.toggleConfig}\n          />\n        )}\n        <div className={\"pomodoro-box \" + this.state.screen}>\n          <button\n            className=\"button button-controls button-toggle\"\n            onClick={this.toggleConfig}\n          >\n            <i className=\"fas fa-cogs\"></i>\n          </button>\n          <div className=\"label\" id=\"timer-label\">\n            {this.state.screen}\n          </div>\n          <div className=\"label\" id=\"time-left\">\n            {this.state.timer}\n          </div>\n          <div className=\"row-buttons\">\n            <button\n              className={\"button button-\" + this.state.screen}\n              id=\"start_stop\"\n              onClick={this.startStopTimer}\n            >\n              <i className={\"fas fa-\" + (this.state.on ? \"pause\" : \"play\")}></i>\n            </button>\n            <button\n              className={\"button button-\" + this.state.screen}\n              id=\"reset\"\n              onClick={this.resetTimers}\n            >\n              <i className=\"fas fa-undo\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}